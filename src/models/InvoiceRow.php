<?php

namespace stesi\invoice\models;

use Yii;
use \stesi\invoice\models\base\InvoiceRow as BaseInvoiceRow;

/**
 * This is the model class for table "inv_invoice_row".
 */
class InvoiceRow extends BaseInvoiceRow
{
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return parent::rules();
        //return array_merge(parent::rules(), []);
        //return array_replace_recursive(parent::rules(),[]);

    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.id'),
            'invoice_id' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.invoice_id'),
            'product_id' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.product_id'),
            'description' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.description'),
            'quantity' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.quantity'),
            'measurement_unit' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.measurement_unit'),
            'unit_price' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.unit_price'),
            'vat_id' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.vat_id'),
            'vat_value' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.vat_value'),
            'tax' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.tax'),
            'taxable' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.taxable'),
            'total_row' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.total_row'),
            'discount' => Yii::t('invoice/invoice_row/labels', 'invoice_row_labels.discount'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [
            'id' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.id'),
            'invoice_id' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.invoice_id'),
            'product_id' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.product_id'),
            'description' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.description'),
            'quantity' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.quantity'),
            'measurement_unit' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.measurement_unit'),
            'unit_price' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.unit_price'),
            'vat_id' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.vat_id'),
            'vat_value' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.vat_value'),
            'tax' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.tax'),
            'taxable' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.taxable'),
            'total_row' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.total_row'),
            'discount' => Yii::t('invoice/invoice_row/hints', 'invoice_row_hints.discount'),
        ];
    }

    public function beforeSave($insert)
    {
        $this->vat_value=isset($this->vat_id) ? $this->vat->vat : 0;
        $this->taxable=$this->unit_price*$this->quantity;
        $this->tax=$this->taxable*$this->vat_value/100;
        $discount=!isset($this->discount)?0:$this->discount;
        $total_row=$this->tax+$this->taxable;
        $this->total_row=$total_row-($total_row*$discount/100);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


}
