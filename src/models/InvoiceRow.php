<?php

namespace stesi\billing\models;

use Yii;
use \stesi\billing\models\base\InvoiceRow as BaseInvoiceRow;
use yii\db\Exception;

/**
 * This is the model class for table "inv_invoice_row".
 */
class InvoiceRow extends BaseInvoiceRow
{
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return parent::rules();
        //return array_merge(parent::rules(), []);
        //return array_replace_recursive(parent::rules(),[]);

    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.id'),
            'invoice_id' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.invoice_id'),
            'product_id' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.product_id'),
            'description' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.description'),
            'quantity' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.quantity'),
            'measurement_unit' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.measurement_unit'),
            'unit_price' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.unit_price'),
            'vat_id' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.vat_id'),
            'vat_value' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.vat_value'),
            'taxable' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.taxable'),
            'discount' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.discount'),
            'subtotal_row' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.subtotal_row'),
            'tax' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.tax'),
            'total_row' => Yii::t('billing/invoice_row/labels', 'invoice_row_labels.total_row'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [
            'id' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.id'),
            'invoice_id' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.invoice_id'),
            'product_id' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.product_id'),
            'description' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.description'),
            'quantity' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.quantity'),
            'measurement_unit' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.measurement_unit'),
            'unit_price' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.unit_price'),
            'vat_id' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.vat_id'),
            'vat_value' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.vat_value'),
            'taxable' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.taxable'),
            'discount' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.discount'),
            'subtotal_row' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.subtotal_row'),
            'tax' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.tax'),
            'total_row' => Yii::t('billing/invoice_row/hints', 'invoice_row_hints.total_row'),
        ];
    }

    public function beforeSave($insert)
    {
        $this->vat_value=!empty($this->vat_id) ? $this->vat->vat : 0;

        $this->quantity=!empty($this->quantity)? $this->quantity : 0;
        $this->unit_price=!empty($this->unit_price)? $this->unit_price : 0;
        $this->taxable=$this->unit_price*$this->quantity;

        $discount=!empty($this->discount) ? $this->discount : 0;
        $sub_total=$this->taxable-($this->taxable*$discount/100);
        if($sub_total!=$this->subtotal_row) {
            //return error conteggio
        }
        $this->tax=$this->subtotal_row*$this->vat_value/100;

        $this->total_row=$this->tax+$this->subtotal_row;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        //aggiorno i conteggi sulla fattura padre
        if(!($this->invoice->updateCount())){
            throw new \Exception(Yii::t('billing/invoice/notify', 'After save invoice error'));
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        //aggiorno i conteggi sulla fattura padre
        if($this->invoice->updateCount()){
            throw new \Exception(Yii::t('billing/invoice/notify', 'After delete invoice error'));
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }


}
